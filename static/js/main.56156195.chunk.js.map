{"version":3,"sources":["Components/Button.component.jsx","Components/Form.js","Components/Information.js","App.js","index.js"],"names":["Button","props","className","onClick","children","error","role","Form","onSubmit","loadweather","autoComplete","TextField","id","label","type","placeholder","name","Information","cityname","weatherIcon","temp_celsius","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","min","max","App","getWeather","e","a","preventDefault","country","target","elements","value","city","fetch","api_call","json","response","setState","sys","main","weather","celsius","calCelsius","temp","get_WeatherIcon","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56156195.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Button.css'\r\n\r\nconst Button = (props) => {\r\n  return <button className=\"button_style\" onClick={props.children}> {props.children} </button>;\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Style.component.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"./Button.component\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={props.loadweather} className=\"\" autoComplete=\"off\">\r\n        <div>{props.error ? error() : \"\"}</div>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"city\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"City\"\r\n          name=\"city\"\r\n        />\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"country\"\r\n          placeholder=\"Country\"\r\n          name=\"country\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <Button>click here</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst error = (props) => {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country...!\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"weather-icons/css/weather-icons.min.css\";\r\nimport './WeatherStyle.css'\r\n\r\nconst Information = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n    <div className=\"Card\">\r\n      <h1 className=\"text-white py-3\">{props.cityname}</h1>\r\n      <h5 className=\"py-4\">\r\n        <i className={`wi ${props.weatherIcon} display-1`} />\r\n      </h5>\r\n\r\n      {/* Get Celsius */}\r\n      {props.temp_celsius ? (\r\n        <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n      ) : null}\r\n\r\n      {/* show max and min temp */}\r\n      {maxminTemp(props.temp_min, props.temp_max)}\r\n\r\n      {/* Weather description */}\r\n      <h4 className=\"py-3\">\r\n        {props.description.charAt(0).toUpperCase() +\r\n          props.description.slice(1)}\r\n      </h4>\r\n    </div>\r\n  </div>\r\n);\r\n};\r\n\r\nexport default Information;\r\n\r\nfunction maxminTemp(min, max) {\r\nif (max && min) {\r\n  return (\r\n    <h3>\r\n      <span className=\"px-4\">{min}&deg;</span>\r\n      <span className=\"px-4\">{max}&deg;</span>\r\n    </h3>\r\n  );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./Components/Form\";\nimport Information from \"./Components/Information\";\nimport \"weather-icons/css/weather-icons.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n//651576cc516e9a31af94d375aff7649a\n//api.openweathermap.org/data/2.5/weather?q=London&appid={API key}\n\nconst Api_Key=\"651576cc516e9a31af94d375aff7649a\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // seting icons\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Information\n          cityname={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}